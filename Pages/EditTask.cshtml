@page "{id:int}"
@model TaskRoute.Pages.EditTaskModel
@using System.Globalization

@{
    ViewData["Title"] = "Modifica Commissione";
}

@section Styles {
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        #map {
            height: 350px; /* Ridotta altezza per fare spazio ai nuovi campi */
            border-radius: var(--card-border-radius);
            overflow: hidden;
            position: relative;
            z-index: 1;
            margin-bottom: 1.5rem;
        }

        #suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid var(--gray-200);
            border-top: none;
            border-radius: 0 0 0.375rem 0.375rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        #suggestions .list-group-item {
            border: none;
            padding: 0.75rem 1rem;
        }

        #suggestions .list-group-item:hover {
            background-color: var(--gray-100);
        }
    </style>
}

<div class="container">
    <h1 class="mb-4">Modifica Commissione</h1>

    <div class="card">
        <div class="card-body">
            <form method="post">
                <input asp-for="Commission.Id" type="hidden" />

                <div class="row g-3">
                    <div class="col-md-12 form-group">
                        <label asp-for="Commission.Title" class="form-label">Titolo</label>
                        <input asp-for="Commission.Title" class="form-control" required />
                        <span asp-validation-for="Commission.Title" class="text-danger"></span>
                    </div>

                    <div class="col-md-4 form-group">
                        <label asp-for="Commission.DueDate" class="form-label">Data</label>
                        <input asp-for="Commission.DueDate" class="form-control" type="date" required />
                        <span asp-validation-for="Commission.DueDate" class="text-danger"></span>
                    </div>

                    <div class="col-md-4 form-group">
                        <label asp-for="Commission.SpecificTime" class="form-label">Orario (Opzionale)</label>
                        <input asp-for="Commission.SpecificTime" class="form-control" type="time" />
                        <span asp-validation-for="Commission.SpecificTime" class="text-danger"></span>
                    </div>

                    <div class="col-md-4 form-group">
                        <label asp-for="Commission.EstimatedDurationMinutes" class="form-label">Durata Stimata (minuti)</label>
                        <input asp-for="Commission.EstimatedDurationMinutes" class="form-control" type="number" list="durationSuggestions" placeholder="Es. 45" />
                        <datalist id="durationSuggestions">
                            <option value="15"> </option>
                            <option value="30"> </option>
                            <option value="45"> </option>
                            <option value="60"> </option>
                            <option value="90"> </option>
                            <option value="120"> </option>
                        </datalist>
                        <span asp-validation-for="Commission.EstimatedDurationMinutes" class="text-danger"></span>
                    </div>

                    <div class="col-12 form-group">
                        <label asp-for="Commission.Description" class="form-label">Descrizione</label>
                        <textarea asp-for="Commission.Description" class="form-control" rows="2"></textarea>
                        <span asp-validation-for="Commission.Description" class="text-danger"></span>
                    </div>

                     <div class="col-12 form-group">
                        <div class="form-check form-switch">
                            <input asp-for="Commission.IsCompleted" class="form-check-input" />
                            <label asp-for="Commission.IsCompleted" class="form-check-label status @(Model.Commission.IsCompleted ? "completed" : "incomplete")">
                                @(Model.Commission.IsCompleted ? "Completata" : "Incompleta")
                            </label>
                        </div>
                    </div>

                    <div class="col-12 form-group position-relative">
                        <label for="addressInput" class="form-label">Indirizzo</label>
                        <input id="addressInput" name="searchAddress" class="form-control"
                               placeholder="Digita un indirizzo o clicca sulla mappa" autocomplete="off" />
                        <div id="suggestions" class="list-group"></div>
                    </div>

                    <div class="col-12">
                        <div id="map"></div>
                    </div>

                    <input type="hidden" id="LocationName" name="LocationName" />
                    <input type="hidden" id="LocationAddress" name="LocationAddress" />
                    <input type="hidden" id="City" name="City" />
                    <input type="hidden" id="PostalCode" name="PostalCode" />
                    <input type="hidden" id="Country" name="Country" />
                    <input type="hidden" id="Latitude" name="Latitude" />
                    <input type="hidden" id="Longitude" name="Longitude" />

                    <div class="col-12 d-flex justify-content-end gap-2">
                        <a asp-page="./TaskList" class="btn btn-outline">Annulla</a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Salva Modifiche
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var map = L.map("map");
            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", { maxZoom: 19 }).addTo(map);
            var markerLayer = L.layerGroup().addTo(map);

            function setLocation(latlng, label, details) {
                markerLayer.clearLayers();
                L.marker(latlng).addTo(markerLayer).bindPopup(label).openPopup();
                map.setView(latlng, 15);
                document.getElementById("LocationName").value = details.name || label;
                document.getElementById("LocationAddress").value = details.address || label;
                document.getElementById("City").value = details.city || "";
                document.getElementById("PostalCode").value = details.postcode || "";
                document.getElementById("Country").value = details.country || "";
                document.getElementById("Latitude").value = latlng.lat;
                document.getElementById("Longitude").value = latlng.lng;
                document.getElementById("addressInput").value = label;
                document.getElementById("suggestions").innerHTML = ""; 
            }

        @if (Model.Commission.LocationId.HasValue)
        {
            <text>
                var initialLatLng = L.latLng(@Model.Commission.Location.Latitude.ToString(CultureInfo.InvariantCulture), @Model.Commission.Location.Longitude.ToString(CultureInfo.InvariantCulture));
                var initialLabel = "@Model.Commission.Location.Name";
                var initialDetails = {
                    name: "@Model.Commission.Location.Name",
                    address: "@Model.Commission.Location.Address",
                    city: "@Model.Commission.Location.City",
                    postcode: "@Model.Commission.Location.PostalCode",
                    country: "@Model.Commission.Location.Country"
                };
                setLocation(initialLatLng, initialLabel, initialDetails);
                document.getElementById('addressInput').value = initialLabel; // Imposta anche il campo di ricerca
            </text>
        }
        else
        {
            <text>
                map.on("locationfound", e => setLocation(e.latlng, "La tua posizione", {}));
                map.on("locationerror", () => {
                    var milano = L.latLng(45.4642, 9.19);
                    setLocation(milano, "Milano, Italia", {name: "Milano", city: "Milano", country: "Italia" });
                });
                map.locate({setView: false, maxZoom: 15, timeout: 10000 });
            </text>
        }

            var input = document.getElementById("addressInput"),
                box = document.getElementById("suggestions");
            var searchTimeout;

            function searchNominatim(q, cb) {
                fetch("https://nominatim.openstreetmap.org/search?format=json&limit=5&addressdetails=1&q=" + encodeURIComponent(q))
                    .then(r => r.json()).then(cb).catch(console.error);
            }

            input.addEventListener("input", function () {
                clearTimeout(searchTimeout);
                var q = this.value.trim();
                box.innerHTML = "";
                if (q.length < 3) return;

                searchTimeout = setTimeout(() => {
                    searchNominatim(q, function (results) {
                        box.innerHTML = ""; 
                        results.forEach(item => {
                            var a = document.createElement("a");
                            a.className = "list-group-item list-group-item-action";
                            a.textContent = item.display_name;
                            a.href = "#";
                            a.onclick = e => {
                                e.preventDefault();
                                var det = {
                                    name: item.display_name,
                                    address: item.display_name,
                                    city: item.address.city || item.address.town || item.address.village,
                                    postcode: item.address.postcode,
                                    country: item.address.country
                                };
                                setLocation(L.latLng(item.lat, item.lon), item.display_name, det);
                            };
                            box.appendChild(a);
                        });
                    });
                }, 300); 
            });

            document.addEventListener("click", function(event) {
                if (!input.contains(event.target) && !box.contains(event.target)) {
                    box.innerHTML = "";
                }
            });

            input.addEventListener("keydown", function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    clearTimeout(searchTimeout);
                    var firstSuggestion = box.querySelector("a");
                    if (firstSuggestion) {
                        firstSuggestion.click(); 
                    } else {
                        var q = this.value.trim();
                        if (q.length < 3) return;
                        searchNominatim(q, function (results) {
                            if (results.length) {
                                var i = results[0];
                                var det = {
                                    name: i.display_name,
                                    address: i.display_name,
                                    city: i.address.city || i.address.town || i.address.village,
                                    postcode: i.address.postcode,
                                    country: i.address.country
                                };
                                setLocation(L.latLng(i.lat, i.lon), i.display_name, det);
                            }
                        });
                    }
                }
            });

            map.on("click", function (e) {
                var url = "https://nominatim.openstreetmap.org/reverse?format=json&addressdetails=1"
                    + "&lat=" + e.latlng.lat + "&lon=" + e.latlng.lng;
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        var addr = data.display_name;
                        var ad = data.address || {};
                        var det = {
                            name: addr,
                            address: addr,
                            city: ad.city || ad.town || ad.village || "",
                            postcode: ad.postcode || "",
                            country: ad.country || ""
                        };
                        setLocation(e.latlng, addr, det);
                    })
                    .catch(console.error);
            });

            document.querySelector('input[name="Commission.IsCompleted"]').addEventListener('change', function() {
                const label = this.nextElementSibling;
                if (this.checked) {
                    label.textContent = "Completata";
                    label.classList.remove("incomplete");
                    label.classList.add("completed");
                } else {
                    label.textContent = "Incompleta";
                    label.classList.remove("completed");
                    label.classList.add("incomplete");
                }
            });
        });
    </script>
}
